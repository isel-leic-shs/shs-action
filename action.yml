name: 'SHS Analyser GitHub Action'
description: |
  GitHub Action that handles security scans using dependency-check and publish output to SHS service

inputs:
  db_user:
    description: "Database username"
    required: true
  db_password:
    description: "Database password"
    required: true
  connection_string:
    description: "Database connection string"
    required: true

runs:
  using: "composite"
  steps:
    - name: creating a dir for files that should not be scanned
      shell: bash
      run: mkdir no-check

    - name: Get the driver for the database
      shell: bash
      run: |
        wget https://jdbc.postgresql.org/download/postgresql-42.6.0.jar -P no-check/driver

    - name: Install Dependency-Check CLI
      shell: bash
      run: |
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.1.0/dependency-check-9.1.0-release.zip 
        unzip dependency-check-9.1.0-release.zip 
        rm dependency-check-9.1.0-release.zip
        mv dependency-check no-check/
        chmod +x no-check/dependency-check/bin/dependency-check.sh 

    - name: make dir for reports
      shell: bash
      run: mkdir reports

    - name: test dependency-check
      shell: bash
      run: |
        ./no-check/dependency-check/bin/dependency-check.sh  \
          --scan ./project \
          --format HTML \
          --format JSON \
          -out reports \
          --dbDriverName "org.postgresql.Driver" \
          --connectionString "${{inputs.connection_string}}" \
          --dbUser "${{inputs.db_user}}" \
          --dbPassword "${{inputs.db_password}}" \
          --dbDriverPath "./no-check/driver/postgresql-42.6.0.jar" \
          -n

    - name: make dir for json and manifest
      shell: bash
      run: mkdir my-files

    - name: Send the .json report file to send folder
      shell: bash
      run: |
        mv reports/dependency-check-report.json my-files/dependency-check-report.json

    - name: Determine project type
      id: detect_project_type
      shell: bash
      run: |
        cd ./project && 
        if [ -f .gradle ] ; then
          PROJECT_TYPE="gradle"
        elif [ -f pom.xml ]; then
          PROJECT_TYPE="maven"
        elif [ -f package.json ]; then
          if grep -q '"react":' package.json; then
            PROJECT_TYPE="react"
          elif grep -q '"@angular/core":' package.json; then
            PROJECT_TYPE="angular"
          elif grep -q '"node":' package.json; then
            PROJECT_TYPE="nodejs"
          else
            PROJECT_TYPE="nodejs"
          fi
        else
          PROJECT_TYPE="unknown"
        fi
        echo "PROJECT_TYPE=$PROJECT_TYPE" >> $GITHUB_ENV

    - name: Create a simple manifest file
      shell: bash
      run: |
        echo '{
          "repositoryName": "${{ github.event.repository.name }}@${{ github.event.repository.owner.login }}",
          "repositoryDescription": "${{ github.event.repository.description }}",
          "repositoryTagName": "${{ github.ref_name }}",
          "projectType": "${{ env.PROJECT_TYPE }}"
        }' > my-files/repository_info.json

    - name: Zip files to send to SHS API
      shell: bash
      run: zip -r my-files.zip my-files

    - name: Send ZIP to Endpoint
      shell: bash
      run: |
         ENDPOINT_URL="https://0a22-2001-8a0-7bc0-fd00-c190-4d80-c21c-f10a.ngrok-free.app/zip"
         curl -X POST -F "file=@my-files/my-files.zip" "$ENDPOINT_URL"

outputs:
  repository_info:
    description: "Information of the repository"
    value: "my-files/repository_info.json"

  dependency_check_report:
    description: "Path to the HTML report file"
    value: "reports/dependency-check-report.html"